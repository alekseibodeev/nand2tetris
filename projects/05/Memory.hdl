// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // 0x6000 -> 0110 0000 0000 0000
    // 0x5fff -> 0101 1111 1111 1111
    // 0x4000 -> 0100 0000 0000 0000
    // Determine wheather the address is RAM
    Not(in=address[14], out=isRAM);
    // Determine wheather the address is Screen
    Not(in=address[13], out=notBit13);
    And(a=address[14], b=notBit13, out=isScreen);
    // Determine wheather the adress is Keyboard
    Or8Way(in=address[0..7], out=bitsFrom0To7);
    Not(in=bitsFrom0To7, out=notBitsFrom0To7);
    Or8Way(in[0..4]=address[8..12], out=bitsFrom8To12);
    Not(in=bitsFrom8To12, out=notBitsFrom8To12);
    And(a=notBitsFrom0To7, b=notBitsFrom8To12, out=notBitsFrom0To12);
    And(a=address[14], b=address[13], out=bit13AndBit14);
    And(a=bit13AndBit14, b=notBitsFrom0To12, out=isKeyboard);
    // RAM
    And(a=isRAM, b=load, out=loadRAM);
    RAM16K(in=in, address[0..13]=address[0..13], load=loadRAM, out=outRAM);
    // Screen
    And(a=isScreen, b=load, out=loadScreen);
    Screen(in=in, address[0..12]=address[0..12], load=loadScreen, out=outScreen);
    // Keyboard
    Keyboard(out=outKeyboard);
    // Produce selectors
    Or(a=isRAM, b=isScreen, out=sel0);
    Or(a=isRAM, b=isKeyboard, out=sel1);
    // Pick output
    Mux4Way16(
      a=false,
      b=outScreen,
      c=outKeyboard,
      d=outRAM,
      sel[0]=sel0,
      sel[1]=sel1,
      out=out
    );
}
